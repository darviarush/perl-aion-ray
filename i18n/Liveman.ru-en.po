msgid "Liveman - markdown компиллятор в тесты и документацию"
msgstr "Liveman - markdown compiler into tests and documentation"

msgid "2.0"
msgstr "2.0"

msgid "Файл lib/Example.md:"
msgstr "File lib/Example.md:"

msgid "Тест:"
msgstr "Test:"

msgid ""
"Проблема современных проектов в том, что документация оторвана от тестирования.\n"
"Это значит, что примеры в документации могут не работать, а сама документация может отставать от кода.\n"
"\n"
"Liveman компилирует файлы `lib/**`.md в файлы `t/**.t`\n"
"и добавляет документацию в раздел `__END__` модуля к файлам `lib/**.pm`.\n"
"\n"
"Используйте команду `liveman` для компиляции документации к тестам в каталоге вашего проекта и запускайте тесты:\n"
"\n"
"    liveman\n"
"\n"
"Запустите его с покрытием.\n"
"\n"
"Опция `-o` отрывает отчёт о покрытии кода тестами в браузере (файл отчёта покрытия: `cover_db/coverage.html`).\n"
"\n"
"Liveman заменяет `our $VERSION = \"...\";` в `lib/**.pm` из `lib/**.md` если он существует в личке и в md.\n"
"\n"
"Если файл **minil.toml** существует, то Liveman прочитает из него `name` и скопирует файл с этим именем и расширением `.md` в README.md."
msgstr ""
"The problem with modern projects is that documentation is divorced from testing.\n"
"This means that the examples in the documentation may not work, and the documentation itself may lag behind the code.\n"
"\n"
"Liveman compiles `lib/**`.md files into `t/**.t` files\n"
"and adds documentation in the module's `__END__` section to the `lib/**.pm` files.\n"
"\n"
"Use the `liveman` command to compile test documentation in your project directory and run the tests:\n"
"\n"
"liveman\n"
"\n"
"Run it coated.\n"
"\n"
"The `-o` option opens the test code coverage report in the browser (coverage report file: `cover_db/coverage.html`).\n"
"\n"
"Liveman replaces `our $VERSION = \"...\";` in `lib/**.pm` from `lib/**.md` if it exists in PM and in md.\n"
"\n"
"If the **minil.toml** file exists, then Liveman will read `name` from it and copy the file with that name and `.md` extension into README.md."

msgid "Коды секций без указанного языка программирования или с `perl` записываются как код в файл `t/**.t`. А комментарий со стрелкой (# -> )превращается в тест `Test::More`."
msgstr "Section codes without a specified programming language or with `perl` are written as code in the file `t/**.t`. And a comment with an arrow (# -> ) turns into a `Test::More` test."

msgid "Сравнить два эквивалентных выражения:"
msgstr "Compare two equivalent expressions:"

msgid "Сравнить два выражения для структур:"
msgstr "Compare two expressions for structures:"

msgid "Сравнить выражение с экстраполированной строкой:"
msgstr "Compare expression with extrapolated string:"

msgid "Сравнить выражение с неэкстраполированной строкой:"
msgstr "Compare an expression with a non-extrapolated string:"

msgid "Проверяет регулярное выражение, включенное в выражение:"
msgstr "Tests the regular expression included in the expression:"

msgid "Он проверяет регулярное выражение, исключённое из выражения:"
msgstr "It checks the regular expression excluded from the expression:"

msgid ""
"Каждый тест выполняется во временном каталоге, который удаляется и создается при запуске теста.\n"
"\n"
"Формат этого каталога: /tmp/.liveman/*project*/*path-to-test*/.\n"
"\n"
"Раздел кода в строке с префиксом md-файла **File `path`:** запись в файл при тестировании во время выполнения.\n"
"\n"
"Раздел кода в префиксной строке md-файла **File `path` is:** будет сравниваться с файлом методом `Test::More::is`.\n"
"\n"
"Файл experiment/test.txt:"
msgstr ""
"Each test runs in a temporary directory, which is deleted and created when the test runs.\n"
"\n"
"The format of this directory is /tmp/.liveman/*project*/*path-to-test*/.\n"
"\n"
"Section of code on line with md file prefix **File `path`:** write to file when testing at runtime.\n"
"\n"
"The code section in the md file prefix line **File `path` is:** will be compared to the file using the `Test::More::is` method.\n"
"\n"
"File experiment/test.txt:"

msgid "Файл experiment/test.txt является:"
msgstr "The experiment/test.txt file is:"

msgid ""
"**Внимание!** Пустая строка между префиксом и кодом не допускается!\n"
"\n"
"Эти префиксы могут быть как на английском, так и на русском."
msgstr ""
"**Attention!** An empty line between the prefix and the code is not allowed!\n"
"\n"
"These prefixes can be in both English and Russian."

msgid ""
"Конструктор. Имеет аргументы:\n"
"\n"
"1. `files` (array_ref) — список md-файлов для методов `transforms` и `tests`.\n"
"1. `open` (boolean) — открыть покрытие в браузере. Если на компьютере установлен браузер **opera**, то будет использоватся команда `opera` для открытия. Иначе — `xdg-open`.\n"
"1. `force_compile` (boolean) — не проверять время модификации md-файлов.\n"
"1. `options` — добавить параметры в командной строке для проверки или доказательства.\n"
"1. `prove` — использовать доказательство (команду `prove` для запуска тестов), а не команду `yath`."
msgstr ""
"Constructor. Has arguments:\n"
"\n"
"1. `files` (array_ref) - list of md files for the `transforms` and `tests` methods.\n"
"1. `open` (boolean) — open the coverage in the browser. If the **opera** browser is installed on your computer, the `opera` command will be used to open it. Otherwise - `xdg-open`.\n"
"1. `force_compile` (boolean) - do not check the modification time of md files.\n"
"1. `options` - add parameters on the command line for verification or proof.\n"
"1. `prove` - use proof (the `prove` command to run tests), rather than the `yath` command."

msgid "Получить путь к `t/**.t`-файлу из пути к `lib/**.md`-файлу:"
msgstr "Get the path to the `t/**.t` file from the path to the `lib/**.md` file:"

msgid ""
"Компилирует `lib/**.md`-файл в `t/**.t`-файл.\n"
"\n"
"А так же заменяет **pod**-документацию в секции `__END__` в `lib/**.pm`-файле и создаёт `lib/**.pm`-файл, если тот не существует.\n"
"\n"
"Файл lib/Example.pm является:"
msgstr ""
"Compiles a `lib/**.md` file into a `t/**.t` file.\n"
"\n"
"It also replaces the **pod** documentation in the `__END__` section in the `lib/**.pm` file and creates a `lib/**.pm` file if it does not exist.\n"
"\n"
"The lib/Example.pm file is:"

msgid "Файл `lib/Example.pm` был создан из файла `lib/Example.md`, что описано в разделе `SINOPSIS` в этом документе."
msgstr "The file `lib/Example.pm` was created from the file `lib/Example.md`, as described in the `SINOPSIS` section of this document."

msgid ""
"Компилировать `lib/**.md`-файлы в `t/**.t`-файлы.\n"
"\n"
"Все, если `$self->{files}` не установлен, или `$self->{files}`."
msgstr ""
"Compile `lib/**.md` files into `t/**.t` files.\n"
"\n"
"All if `$self->{files}` is not set, or `$self->{files}`."

msgid ""
"Запустить тесты (`t/**.t`-файлы).\n"
"\n"
"Все, если `$self->{files}` не установлен, или `$self->{files}` только."
msgstr ""
"Run tests (`t/**.t` files).\n"
"\n"
"All if `$self->{files}` is not set, or `$self->{files}` only."

msgid "Yaroslav O. Kosmina <dart@cpan.org>"
msgstr "Yaroslav O. Kosmina <dart@cpan.org>"

msgid "⚖ **GPLv3**"
msgstr "⚖ **GPLv3**"

msgid "The Liveman module is copyright © 2023 Yaroslav O. Kosmina. Rusland. All rights reserved."
msgstr "The Liveman module is copyright © 2023 Yaroslav O. Kosmina. Rusland. All rights reserved."

msgid ""
"Проблема современных проектов в том, что документация оторвана от тестирования.\n"
"Это значит, что примеры в документации могут не работать, а сама документация может отставать от кода.\n"
"\n"
"Liveman компилирует файлы `lib/**.md` в файлы `t/**.t`\n"
"и добавляет документацию в раздел `__END__` модуля к файлам `lib/**.pm`.\n"
"\n"
"Используйте команду `liveman` для компиляции документации к тестам в каталоге вашего проекта и запускайте тесты:\n"
"\n"
"    liveman\n"
"\n"
"Запустите его с покрытием.\n"
"\n"
"Опция `-o` открывает отчёт о покрытии кода тестами в браузере (файл отчёта покрытия: `cover_db/coverage.html`).\n"
"\n"
"Liveman заменяет `our $VERSION = \"...\";` в `lib/**.pm` из `lib/**.md` из секции **VERSION** если она существует.\n"
"\n"
"Если файл **minil.toml** существует, то Liveman прочитает из него `name` и скопирует файл с этим именем и расширением `.md` в `README.md`.\n"
"\n"
"Если нужно, чтобы документация в `*.md` была написана на одном языке, а `pod` – на другом, то в начале `*.md` нужно указать `!from:to` (с какого на какой язык перевести, например, для этого файла: `!ru:en`)."
msgstr ""
"The problem with modern projects is that documentation is divorced from testing.\n"
"This means that the examples in the documentation may not work, and the documentation itself may lag behind the code.\n"
"\n"
"Liveman compiles `lib/**.md` files into `t/**.t` files\n"
"and adds documentation in the module's `__END__` section to the `lib/**.pm` files.\n"
"\n"
"Use the `liveman` command to compile test documentation in your project directory and run the tests:\n"
"\n"
"liveman\n"
"\n"
"Run it coated.\n"
"\n"
"The `-o` option opens a code coverage report by tests in the browser (coverage report file: `cover_db/coverage.html`).\n"
"\n"
"Liveman replaces `our $VERSION = \"...\";` in `lib/**.pm` from `lib/**.md` from the **VERSION** section if it exists.\n"
"\n"
"If the **minil.toml** file exists, then Liveman will read `name` from it and copy the file with that name and `.md` extension into `README.md`.\n"
"\n"
"If you need the documentation in `*.md` to be written in one language, and `pod` in another, then at the beginning of `*.md` you need to indicate `!from:to` (from which language to translate, for example , for this file: `!ru:en`)."

msgid ""
"Каждый тест выполняется во временном каталоге, который удаляется и создается при запуске теста.\n"
"\n"
"Формат этого каталога: /tmp/.liveman/*project*/*path-to-test*/.\n"
"\n"
"Раздел кода в строке с префиксом md-файла **File `path`:** запишется в файл при тестировании во время выполнения.\n"
"\n"
"Раздел кода в префиксной строке md-файла **File `path` is:** будет сравниваться с файлом методом `Test::More::is`.\n"
"\n"
"Файл experiment/test.txt:"
msgstr ""
"Each test runs in a temporary directory, which is deleted and created when the test runs.\n"
"\n"
"The format of this directory is /tmp/.liveman/*project*/*path-to-test*/.\n"
"\n"
"The section of code on the line with the md file prefix **File `path`:** will be written to a file when tested at runtime.\n"
"\n"
"The code section in the md file prefix line **File `path` is:** will be compared to the file using the `Test::More::is` method.\n"
"\n"
"File experiment/test.txt:"

msgid ""
"Проблема современных проектов в том, что документация оторвана от тестирования.\n"
"Это значит, что примеры в документации могут не работать, а сама документация может отставать от кода.\n"
"\n"
"Liveman компилирует файлы `lib/**.md` в файлы `t/**.t`\n"
"и добавляет документацию в раздел `__END__` модуля к файлам `lib/**.pm`.\n"
"\n"
"Используйте команду `liveman` для компиляции документации к тестам в каталоге вашего проекта и запускайте тесты:\n"
"\n"
"    liveman\n"
"\n"
"Запустите его с покрытием.\n"
"\n"
"Опция `-o` открывает отчёт о покрытии кода тестами в браузере (файл отчёта покрытия: `cover_db/coverage.html`).\n"
"\n"
"Liveman заменяет `our $VERSION = \"...\";` в `lib/**.pm` из `lib/**.md` из секции **VERSION** если она существует.\n"
"\n"
"Если файл **minil.toml** существует, то Liveman прочитает из него `name` и скопирует файл с этим именем и расширением `.md` в `README.md`.\n"
"\n"
"Если нужно, чтобы документация в `.md` была написана на одном языке, а `pod` – на другом, то в начале `.md` нужно указать `!from:to` (с какого на какой язык перевести, например, для этого файла: `!ru:en`).\n"
"\n"
"Файлы с переводами складываются в каталог `i18n`, например, `lib/My/Module.md` -> `i18n/My/Module.ru-en.po`. Перевод осуществляется утилитой `trans` (она должна быть установлена в системе). Файлы переводов можно подкорректировать, так как если перевод уже есть в файле, то берётся он."
msgstr ""
"The problem with modern projects is that documentation is divorced from testing.\n"
"This means that the examples in the documentation may not work, and the documentation itself may lag behind the code.\n"
"\n"
"Liveman compiles `lib/**.md` files into `t/**.t` files\n"
"and adds documentation in the module's `__END__` section to the `lib/**.pm` files.\n"
"\n"
"Use the `liveman` command to compile test documentation in your project directory and run the tests:\n"
"\n"
"liveman\n"
"\n"
"Run it coated.\n"
"\n"
"The `-o` option opens a code coverage report by tests in the browser (coverage report file: `cover_db/coverage.html`).\n"
"\n"
"Liveman replaces `our $VERSION = \"...\";` in `lib/**.pm` from `lib/**.md` from the **VERSION** section if it exists.\n"
"\n"
"If the **minil.toml** file exists, then Liveman will read `name` from it and copy the file with that name and `.md` extension into `README.md`.\n"
"\n"
"If you need the documentation in `.md` to be written in one language, and `pod` in another, then at the beginning of `.md` you need to indicate `!from:to` (from which language to translate, for example, for this file: `!ru:en`).\n"
"\n"
"Files with translations are stored in the `i18n` directory, for example, `lib/My/Module.md` -> `i18n/My/Module.ru-en.po`. Translation is carried out using the `trans` utility (it must be installed on the system). Translation files can be corrected, because if the translation is already in the file, then it is taken."

